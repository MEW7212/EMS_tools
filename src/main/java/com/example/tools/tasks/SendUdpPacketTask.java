package com.example.tools.tasks;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

@Log4j2
@Component
public class SendUdpPacketTask {

    private static final String MESSAGE = "3E0501000010101123030062A00000800604656282156D99A4611122445F3E66DB0A139CE86F8C1F6F895CA846657D039A72BE08BAAD2938E5F38EEB289522AF8F872E386A486010AA3B93BB01A155CBCA08FB1CA606C3D3C106F1069494CA7821697997854BB58F3DA1CE5D1AE8DBFD99B10EA620636BC7897B610D22AA9A1AEAC5BE21B3AB6A2B49948DEE8EC02350F1FC6A03D897F3B7EA5EE3106A6C7BC40B3054F4E99A5321C5631F9EAB0A7FF28786791795A35BA45B5ECA6E3EC99EB4F0098DE42A58B9AF0D82E3AE7442180207FEF9B629BAE8F6D4049B08F04530FCD210B21F39BE3391B8AB5EAE15032119C65A4C464DC6789FD1888DB3B4DD1BD213DE9CD01871F35F58150FFBA7C8A543C8DB60DA3443BB89050B6680DB72FD4127CEE61954BBE19421764611705C1AAF711C34D31371D7577C8084C428E883C4415936F95C16B401E2692C6F23DF7FD0491B19FD3864069B98606D3EA601F1E967458398A1DB167AF0F34B63F53F0FBBB2684CD93F9B62FD1D61B1D3ABD9B7F736463A4F5C14315EE58241856CA87563643CF26D4A81A0E5BAB843E8CF56E8F45C1A7DC924CA9A6857D6A22BFFD3209C39FA7A9A240C71E211EFA6494ED8FEE939F7F8EBBCBD5725476217645871DFC8CB39A608E3D1637B43E3145F4DA955B240B7E93D617115A1A6BED9DE9E862D68CDC0B137C736E30F4FBFB69B2D5575FA50E5A8F5E28A7BCA3D77318BD215469A8DA0D82F34D7908EEDD7D647FE500C462EAC1E2A199F286A0956283221820D13FC05E3FE30AA99914433408EB7A7891C99898CEFB62D846C14429678C3CA7E0BBDCD9D1A1A67D9E46BF9625AD49FC1096219A99A335F13F7E14ED472E2FC43E58FE2A6CBC9D166B78DE46489503819BFAF71D2DC4525F0910989FB13CC3C08D6A0EE377ADE58F7CE02EDD43B4E8C2E4413B6AE2EB2C1948805B68BE93DDC9B7FCE01A65D23F73E71D5D27E730540B70DE4153A06C81C0AF0048CD11516F1348158E82A0D8A7CBC34CB791BF90CE38C26CB95ADEB9E51BA87ABCB6A79367D053E0BFB61AB329EAFD9D7A1400F78A1B535CDB76DF98CD939198D8994F990988FAB4091D8567BB9327AD40F5C3267910477DADF0DE9E2ACCC38AF38B2ADC89A6A7D5272C7B8A8E17A3CEA671FBD28A96115F9DD36F95C5988C9D36ECDF5110070794D48552D8CDBB5A8F94C6AEA100352638D601CA75ABC215C13133795307CD4CAF2330BB1A03CE5C7DF8576FD0FBABE1903E558A28E96BB19244B11AF9AF3387D48775EB58ECFE1C1B8A897CE607AFA9D72C19B05A6FE18BDE33893055B94E60AB5BE79E38830E8AE587655F8E19D6CB7437BFCFF1C7083B760A55662F18F7C74A428245EBE3066A68B2CC2D0177DD82B5A1A3731915AE5DD2B80C2A264F49906A7CB533C3D15E84100CFEB2096103905E1093EB6BE4B982F2DA23AFE68444554883CD797DE0ACE0CF4A87F76";

    @Value("${udp.send.ip}")
    private String ip;

    @Value("${udp.send.port}")
    private int port;

    @Value("${udp.send.count}")
    private int count;

    @Value("${udp.send.interval}")
    private double interval;

    private int k = 1;

    public void run() {
        /*
        for (int i = 0; i < count; i++) {
            try {
                log.info("times: {}", i+1);
                sendUDPPacket();
                Thread.sleep((long) (interval * 1000));
            } catch (InterruptedException e) {
                log.info("InterruptedException: ", e);
                Thread.currentThread().interrupt();
            } catch (Exception e) {
                log.info("SendUDPPacketTask fail: ", e);
            }
        }
        */
        try {
            log.info("times: {}", k);
            sendUDPPacket();
            k++;
        } catch (Exception e) {
            log.info("SendUDPPacketTask fail: ", e);
        }
    }

    private void sendUDPPacket() {
        try {
            try (DatagramSocket datagramSocket = new DatagramSocket()) {
                byte[] buffer = hexStringToByteArray(SendUdpPacketTask.MESSAGE);
                InetAddress inetAddress = InetAddress.getByName(ip);
                DatagramPacket packet = new DatagramPacket(buffer,
                        buffer.length,
                        inetAddress,
                        port);
                datagramSocket.send(packet);

                log.info(ip + " send success.");
            }
        } catch (Exception e) {
            log.info("SendUDPPacket fail: ", e);
        }
    }

    // Converts a hex string to a byte array
    public static byte[] hexStringToByteArray(String hexString) {
        int len = hexString.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
                    + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }

    public static void main(String[] args) {
        String hexString = "3E0501000010101123030062A00000800604656282156D99A4611122445F3E66DB0A139CE86F8C1F6F895CA846657D039A72BE08BAAD2938E5F38EEB289522AF8F872E386A486010AA3B93BB01A155CBCA08FB1CA606C3D3C106F1069494CA7821697997854BB58F3DA1CE5D1AE8DBFD99B10EA620636BC7897B610D22AA9A1AEAC5BE21B3AB6A2B49948DEE8EC02350F1FC6A03D897F3B7EA5EE3106A6C7BC40B3054F4E99A5321C5631F9EAB0A7FF28786791795A35BA45B5ECA6E3EC99EB4F0098DE42A58B9AF0D82E3AE7442180207FEF9B629BAE8F6D4049B08F04530FCD210B21F39BE3391B8AB5EAE15032119C65A4C464DC6789FD1888DB3B4DD1BD213DE9CD01871F35F58150FFBA7C8A543C8DB60DA3443BB89050B6680DB72FD4127CEE61954BBE19421764611705C1AAF711C34D31371D7577C8084C428E883C4415936F95C16B401E2692C6F23DF7FD0491B19FD3864069B98606D3EA601F1E967458398A1DB167AF0F34B63F53F0FBBB2684CD93F9B62FD1D61B1D3ABD9B7F736463A4F5C14315EE58241856CA87563643CF26D4A81A0E5BAB843E8CF56E8F45C1A7DC924CA9A6857D6A22BFFD3209C39FA7A9A240C71E211EFA6494ED8FEE939F7F8EBBCBD5725476217645871DFC8CB39A608E3D1637B43E3145F4DA955B240B7E93D617115A1A6BED9DE9E862D68CDC0B137C736E30F4FBFB69B2D5575FA50E5A8F5E28A7BCA3D77318BD215469A8DA0D82F34D7908EEDD7D647FE500C462EAC1E2A199F286A0956283221820D13FC05E3FE30AA99914433408EB7A7891C99898CEFB62D846C14429678C3CA7E0BBDCD9D1A1A67D9E46BF9625AD49FC1096219A99A335F13F7E14ED472E2FC43E58FE2A6CBC9D166B78DE46489503819BFAF71D2DC4525F0910989FB13CC3C08D6A0EE377ADE58F7CE02EDD43B4E8C2E4413B6AE2EB2C1948805B68BE93DDC9B7FCE01A65D23F73E71D5D27E730540B70DE4153A06C81C0AF0048CD11516F1348158E82A0D8A7CBC34CB791BF90CE38C26CB95ADEB9E51BA87ABCB6A79367D053E0BFB61AB329EAFD9D7A1400F78A1B535CDB76DF98CD939198D8994F990988FAB4091D8567BB9327AD40F5C3267910477DADF0DE9E2ACCC38AF38B2ADC89A6A7D5272C7B8A8E17A3CEA671FBD28A96115F9DD36F95C5988C9D36ECDF5110070794D48552D8CDBB5A8F94C6AEA100352638D601CA75ABC215C13133795307CD4CAF2330BB1A03CE5C7DF8576FD0FBABE1903E558A28E96BB19244B11AF9AF3387D48775EB58ECFE1C1B8A897CE607AFA9D72C19B05A6FE18BDE33893055B94E60AB5BE79E38830E8AE587655F8E19D6CB7437BFCFF1C7083B760A55662F18F7C74A428245EBE3066A68B2CC2D0177DD82B5A1A3731915AE5DD2B80C2A264F49906A7CB533C3D15E84100CFEB2096103905E1093EB6BE4B982F2DA23AFE68444554883CD797DE0ACE0CF4A87F76";  // Example text representing "12345"

        int len = hexString.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
                    + Character.digit(hexString.charAt(i+1), 16));
        }

        System.out.println(data.length);

        for (byte b : data) {
            System.out.print((char) b);
        }
    }

}
